-- How many unique vendors are in the products table?
-- How many unique items are in the products table?
-- How many unique stores are there in the stores tables?
-- How many unique stores are active?
SELECT count(distinct stores)
FROM stores
WHERE store_status = 'A'

-- Which products have a case cost of more than $100?
-- How many unique items does vendor 305 carry?
-- Case cost, shelf_price and bottle_price; What are these fields?
-- Challenge* Is case cost the cost to our customer or cost to the store?
SELECT pack, bottle_price, shelf_price, case_cost, pack * bottle_price AS case_cost2
FROM products
LIMIT 100



----------------------------------------------------------------
--          FILTERS
----------------------------------------------------------------
Where – filters rows based on a specified condition.
Limit – gets a subset of rows generated by a query.
Fetch– limits the number of rows returned by a query.
In – selects data that matches any value in a list of values.
Between – selects data that is a range of values.
Like – filters data based on pattern matching.
Is Null – checks if a value is null or not.

-- FETCH
SELECT vendor, category_name, item_description
FROM products
ORDER BY 1
FETCH FIRST ROW ONLY;

SELECT vendor, category_name, item_description
FROM products
ORDER BY 1
FETCH FIRST 5 ROW ONLY;

SELECT vendor, category_name, item_description
FROM products
ORDER BY 1 
OFFSET 100 ROWS
FETCH NEXT 5 ROW ONLY;

--IN
SELECT item_no, category_name, item_description, vendor
FROM products
WHERE vendor IN (305, 391, 370, 380)
ORDER BY 4 DESC
LIMIT 100

-- NOT IN
SELECT item_no, category_name, item_description, vendor
FROM products
WHERE vendor NOT IN (305, 391, 370, 380)
LIMIT 100

--BETWEEN
SELECT item_no, category_name, item_description, vendor
FROM products
WHERE vendor BETWEEN 300 AND 400
LIMIT 100

-- ILIKE
SELECT item_no, category_name, (item_description), vendor
FROM products
WHERE vendor BETWEEN 300 AND 400
AND (item_description) LIKE '%APPLE%'
LIMIT 100

-- only show vendor and item number for vendors 10 , 11, 28 & 305, sorted by Vendor in ascending order
-- only show vendor and item number for vendors between 100 and 450 sorted by item_number in descending order
-- only show vendor, category_name, item_description, case_cost for vendors that sell items like Whiskey, whiskies or whisky with a case cost more than 100
-- CHALLENGE 


-- IS NULL
SELECT
COUNT(*)
FROM STORES
WHERE ADDRESS_INFO IS NOT NULL;

SELECT 
COUNT(*)
FROM STORES
WHERE ADDRESS_INFO IS NULL;

--FIX THE CODE
SELECT vendor, vendor_name
FROM products
ORDER BY vendor
OFFSET BY 10 ROWS
FETCH FIRST 10 ROWS ONLY;


---------------------------------------------------------------------------------------------------
-- GROUP BY/ HAVING
---------------------------------------------------------------------------------------------------
/* GROUP BY is used whenever you aggregated a measure that also has a dimension in the results.
 you will always be GROUPING BY  the dimensions */
SELECT DISTINCT vendor,sum(bottle_price),category_name,  sum(shelf_price)
FROM products 
WHERE vendor = 305 
AND (case_cost < 70 
OR pack > 12)
GROUP BY vendor, category_name
ORDER BY 3 DESC;

/*HAVING is a filter for aggregations so if you wanted to only see where the sum(shelf_price) is over 20$ 
you would not put it in the WHERE but in the HAVING. */
SELECT DISTINCT vendor,category_name, sum(bottle_price), sum(shelf_price)
FROM products 
WHERE vendor = 305 
AND (case_cost < 70 
OR pack > 12)

GROUP BY vendor, category_name

HAVING
SUM()>2

ORDER BY 3 DESC;

/* It's time to fix the field names using AS */

SELECT DISTINCT 
vendor,
category_name, 
sum(bottle_price) AS tot_NLC, 
sum(shelf_price) AS tot_Sell_Price

FROM products 

WHERE vendor = 305 
AND (case_cost < 70 
OR pack > 12)

GROUP BY vendor, category_name

HAVING sum(shelf_price)>20
ORDER BY 3 DESC;



--------------------------------------------------------
-- AGGREGATES
--------------------------------------------------------
SELECT COUNT(vendor)

-- 271 records 
SELECT COUNT(DISTINCT vendor)
FROM products

SELECT vendor, AVG(shelf_price)
FROM products
GROUP BY vendor
ORDER BY 2

SELECT vendor, MIN(shelf_price)
FROM products
GROUP BY vendor
ORDER BY 2

SELECT vendor, category_name, MAX(shelf_price)
FROM products
GROUP BY vendor
ORDER BY 2

SELECT vendor, category_name, SUM(shelf_price)
FROM products
GROUP BY vendor
ORDER BY 2


SELECT vendor, COUNT(category_name), shelf_price, MAX(shelf_price), MIN(shelf_price), AVG(shelf_price)
FROM products
GROUP BY vendor,category_name, shelf_price
ORDER BY 2

/* Example for nesting aggregates: CANNOT BE DONE unless doing a subselect.
Example of why you might do this
Count how many hours you worked in a given week then find the average for the week. */

SELECT DISTINCT AVG(COUNT(*))
FROM products

Select Vendor, case_cost
FROM products
WHERE 
vendor = 10
order by 1

SELECT vendor, category_name, count(item_no)
FROM products

WHERE item_description ILIKE '%whisk%'
GROUP BY VENDOR,category_name
HAVING count(item_no) >10
order by 2 DESC


/*STRETCH - Build 2 results
- show the top 10 vendors based on how many items they carry
- Show the results of vendors that have more then 10 items like whiskey
*/






/* Guide
Bring back just vendor and item number
Run a count on item number
What are you grouping by?
You will need to order by in a descending fashion on your count.
Limit your results to 10


add category_name to your file
adjust the above query to have a having clause > 10
use Ilike to look for any item_descriptions that are like whisk
*/








---------------------------------------------------------------------------------------------
-- * BONUS* AGGREGATES for Statistics
---------------------------------------------------------------------------------------------
/* Corr calculates the pearsons correlation a correlation of 1 means a perfect positive
a correlation of -1 means a perfect negative and a correlation of 0 means no correlation */
-- corr(Y,X)
SELECT corr(shelf_price, case_cost)
FROM products

--population covariance
SELECT covar_pop(shelf_price, case_cost)
FROM products

--sample covariance
SELECT covar_samp(shelf_price, case_cost)
FROM products

-- regr_avgx average of the independent variable (sum(X)/N)
SELECT regr_avgx(shelf_price, case_cost)
FROM products

-- regr_avgy(Y, X)average of the dependent variable (sum(Y)/N)
SELECT regr_avgy(shelf_price, case_cost)
FROM products

-- regr_count(Y, X) number of input rows in which both expressions are nonnull
SELECT regr_count(shelf_price, case_cost)
FROM products

--regr_intercept(Y,X) y-intercept of the least-squares-fit linear equation determined by 
-- the (X,Y) pairs
SELECT	regr_intercept(shelf_price, case_cost)
FROM products
   
-- regr_r2(Y,X) square of the correlation coefficient
SELECT	regr_r2(shelf_price, case_cost)
FROM products

-- regr_slope(Y,X) slope of the least squares fit
SELECT	regr_intercept(shelf_price, case_cost)
FROM products


--stddev(expression) Standard Deviation sample
SELECT vendor, stddev(shelf_price)
FROM products
GROUP BY vendor
ORDER BY 2

--stddev_pop(expression) Standard deviation population
SELECT vendor, stddev_pop(shelf_price)
FROM products
GROUP BY vendor
ORDER BY 2



